generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String  @id @default(uuid())
  name           String
  username       String  @unique
  externalUserId String  @unique
  imageUrl       String? @db.Text
  email          String

  bio  String?
  link String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts      Post[]
  members    Member[]
  followers  Follow[] @relation("Follower")
  followings Follow[] @relation("Following")
  blockers   Block[]  @relation("Blocker")
  blockings  Block[]  @relation("Blocking")
  replies    Reply[]
  likes      Like[]
  mutes      Mute[]
}

// e.g I follow to other user then I am follower and other user is following
model Follow {
  id String @id @default(uuid())

  followerId String  @unique
  follower   Profile @relation("Follower", fields: [followerId], references: [id])

  followingId String  @unique
  following   Profile @relation("Following", fields: [followingId], references: [id])
}

// e.g I block to other user then I am blocker and other user is blocking
model Block {
  id String @id @default(uuid())

  blockerId String  @unique
  blocker   Profile @relation("Blocker", fields: [blockerId], references: [id])

  blockingId String  @unique
  blocking   Profile @relation("Blocking", fields: [blockingId], references: [id])
}

model Post {
  id      String @id @default(uuid())
  content String @db.Text

  imageUrl String? @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      Tag[]
  replies   Reply[]
  likes     Like[]
  mutes     Mute[]

  @@index([profileId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([postId])
  @@index([profileId])
}

model Reply {
  id      String @id @default(uuid())
  content String @db.Text

  imageUrl String? @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(uuid())
  name String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model Mute {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: NoAction)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([profileId])
}

enum MemberType {
  MEMBER
  ADMIN
}

model Group {
  id       String  @id @default(uuid())
  name     String
  imageUrl String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
}

model Member {
  id         String     @id @default(uuid())
  memberType MemberType @default(MEMBER)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupId])
}
